{"version":3,"sources":["components/SearchBar.js","components/Pagination.js","components/common/UnOrderedDisplay.js","components/DisplayOfResults.js","components/NominatedResults.js","components/NominationBar.js","services/Api.js","services/searchRequest.js","containers/HomePageContainer.js","assets/fontawesome/fontawesomelibrary.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","searchTerm","handleChange","Form","id","Group","controlId","Row","Col","className","Label","InputGroup","Prepend","Text","icon","Control","type","value","onChange","Pagination","pagination","pageCount","total","handleClick","totalPages","Math","ceil","paginationSetup","text","onClick","isShowing","map","obj","ind","Button","size","variant","UnOrderedDisplay","props","title","buttonText","data","outerClassName","imdbID","undefined","toLowerCase","length","isDisabled","has","Title","Year","DisplayOfResults","searchResults","setId","NominationBar","ProgressBar","now","label","srOnly","getRequest","request","fetch","then","response","json","catch","error","console","searchRequest","pageNumber","term","split","join","queryString","HomePageContainer","savedNominations","window","localStorage","getItem","JSON","parse","savedId","thankYouBar","useRef","useState","nominatedMovies","Set","isTyping","totalResults","isChangingPage","setLocalStorage","updateIsTyping","oldStorage","useEffect","setItem","stringify","delayAPIRequest","setTimeout","clearTimeout","Search","current","scrollIntoView","Container","fluid","ref","sm","NominatedResults","filter","nomMovie","fid","e","target","add","library","faSearch","faAngleLeft","faAngleRight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20c3f721.chunk.js","sourcesContent":["import { React } from 'react';\n\n// Bootstrap imports\nimport { Form, Row, Col, InputGroup } from 'react-bootstrap'\n\n//Font Awesome Import\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst SearchBar = ({ searchTerm, handleChange }) => {\n\n    return (\n        <Form id='search-movies'>\n            <Form.Group controlId='movie-search'>\n                <Row>\n                    <Col className='text-left'>\n                        <Form.Label>Search movies to nominate</Form.Label>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <InputGroup id='search-bar'>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    <FontAwesomeIcon icon='search'/>\n                                </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control type='text' value={searchTerm} onChange={handleChange}/>\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </Form.Group>\n        </Form>\n    );\n\n};\n\nexport default SearchBar;","import { React, Fragment } from 'react';\n\n//Bootstrap\nimport Button from 'react-bootstrap/Button';\n\n//Font Awesome Import\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Pagination = ({ pagination }) => {\n\n    const [pageCount, total, handleClick] = pagination;\n    const totalPages = Math.ceil(total / 10);\n\n    //general setup for pagination bar\n    const paginationSetup = [\n        { icon: 'angle-left', text: '-', onClick: handleClick, isShowing: pageCount === 1},\n        { icon: '', text: `${pageCount}`  },\n        { icon: '', text: '/' },\n        { icon: '', text: `${totalPages}` },\n        { icon: 'angle-right', text: '+', onClick: handleClick, isShowing: pageCount === totalPages }\n    ];\n\n\n    //This will map through the pagination array and give us the pagination bar\n    const createBar = () => {\n        return paginationSetup.map((obj,ind) => {\n            return obj.icon ?\n                (<Button size='sm' \n                    variant=\"outline-secondary\" \n                    className={ obj.isShowing ? 'hidden' : ''} \n                    onClick={() => obj.onClick(obj.text)}\n                    type='button'\n                    key={`pagination-button${obj.icon}`}>\n                    <FontAwesomeIcon icon={obj.icon}/>\n                </Button>) :\n                (<span className='paginationNumbers' key={`pagination-span-${obj.text}-${ind}`}>{obj.text}</span>);\n        });\n    };\n\n    return (\n        <Fragment>\n            {createBar()}\n        </Fragment>\n    );\n\n};\n\nexport default Pagination;","import { React } from 'react';\n\n// Bootstrap imports\nimport { Form, Button } from 'react-bootstrap'\n\n//Component import\nimport Pagination from './../Pagination';\n\nconst UnOrderedDisplay = ( props ) => {\n    const { title, buttonText, data, onClick, outerClassName = '', imdbID = undefined, pagination = undefined} = props;\n\n    //renders out the li based off the data we get back\n    const expandListItem = () => {\n    let li = data.length ? \n        data.map((obj,ind) => { \n            //We will disabled the Nominate button if we have 5 Nominations or if we have the movie nominated already\n            let isDisabled = (imdbID && ( imdbID.size >= 5 || imdbID.has(obj.imdbID)) ) ? 'disabled' : '';\n            //returns the li item\n            return (\n                <li className='text-left' key={`li-${buttonText}-${ind}`}>\n                    <div className='li-cards'>\n                        <span className='li-title'>\n                        {obj.Title}   \n                        </span>\n                        <span className='li-year'>\n                        ({obj.Year}) \n                        </span>\n                        <Button \n                            variant={ isDisabled === 'disabled' ? 'outline-secondary' : 'success' }\n                            type='button' \n                            onClick={() => onClick(obj)} \n                            className={`${isDisabled}`}>\n\n                        {    buttonText }\n                        </Button>\n                    </div>\n\n                </li> );\n        }) : null;\n    return li;\n\n    };\n\n    return (\n        <Form className={`unordered-list ${outerClassName}`}>\n            <h5 className='text-left' id={buttonText.toLowerCase()} key={`header-${buttonText.toLowerCase()}`}>\n                { title }\n            </h5>\n            <ul>\n                {expandListItem()}\n            </ul> \n            {   (pagination && pagination[1] > 10) &&\n                <Pagination pagination={pagination}/>\n            }\n        </Form>\n    );\n\n};\n\nexport default UnOrderedDisplay;","import { React } from 'react';\n\n//Components\nimport UnOrderedDisplay from './common/UnOrderedDisplay' \n\nconst DisplayOfResults = ({ data, searchTerm, onClick, pagination }) => {\n\n    const props = { title: `Results for \"${searchTerm ? searchTerm : ''}\"`, buttonText: \"Nominate\" };\n\n    return (\n        <UnOrderedDisplay \n            title={ props.title } \n            buttonText={ props.buttonText } \n            data={data.searchResults} \n            onClick={onClick}\n            imdbID={data.setId}\n            pagination={pagination}\n            outerClassName='result-list'\n        />\n    );\n\n};\n\nexport default DisplayOfResults;","import { React } from 'react';\n\n//Components\nimport UnOrderedDisplay from './common/UnOrderedDisplay'\n\nconst DisplayOfResults = ({ data, onClick }) => {\n    const props = { title: ' Your Nominationed Movies', buttonText: \"Remove\" }\n\n    return (\n        <UnOrderedDisplay \n            title={ props.title } \n            buttonText={ props.buttonText } \n            data={data} onClick={onClick}\n            outerClassName='nomination-list'\n        />\n    );\n\n};\n\nexport default DisplayOfResults;","import { React, Fragment } from 'react';\n\n// Bootstrap imports\nimport { ProgressBar, Row, Col } from 'react-bootstrap'\n\n\nconst NominationBar = ({ size }) => {\n\n    return (\n        <Row className='nomination-row'>\n            <Col>\n                {   size >= 5 &&\n                        <Fragment>\n                            <p>You have nominated 5 Movies!</p>\n                        </Fragment>\n                } \n                {   size < 5 &&\n                        <Fragment>\n                            <p>You have nominated {size} out of 5 movies</p>\n                        </Fragment>\n                }\n            </Col>\n            <Col className='progress-bar-col'>\n                <ProgressBar now={size * 20} label={`${size} out of 5`} variant={size === 5 ? 'sucess' : 'info'} srOnly/>\n            </Col>\n        </Row>\n    );\n\n};\n\nexport default NominationBar;","export const  getRequest = (request) => {\n    return fetch(`http://www.omdbapi.com/?${request}&apikey=bef97d`)\n            .then(response => response.json())\n            .catch(error => console.error(error));\n}","import { getRequest } from './Api'\n\nconst searchRequest = (searchTerm, pageNumber = 1) => {\n    //converting search term into query string friendly format\n    let term = searchTerm.split(' ').join('+');\n\n    //formatting the query string to send to the get request\n    let queryString = `s=${term}&page=${pageNumber}`;\n    return getRequest(queryString);\n};\n\n\nexport { searchRequest };","import { React, useState, useEffect, useRef } from 'react';\n\n//Components imports\nimport SearchBar from '../components/SearchBar';\nimport DisplayOfResults from '../components/DisplayOfResults';\nimport NominatedResults from '../components/NominatedResults';\n// import ThankYouBar from '../components/ThankYouBar'\nimport NominationBar from '../components/NominationBar';\n\n// Bootstrap imports\nimport { Container, Row, Col } from 'react-bootstrap';\n\n//API calls\nimport { searchRequest } from './../services/searchRequest';\n\n\nconst HomePageContainer = () => {\n\n    //Checks if we have nominations saved and get the ids as well\n    const savedNominations = window.localStorage.getItem('savedNoms') ?\n        JSON.parse(window.localStorage.getItem('savedNoms')) : [];\n\n    const savedId = window.localStorage.getItem('savedIds') ?\n        JSON.parse(window.localStorage.getItem('savedIds')) :\n        [];\n\n    //To control the scrolling up to top when user selects 5 movies\n    const thankYouBar = useRef(null);\n\n    //intital local storage setup\n    const [localStorage, setLocalStorage ] = useState( {\n        searchResults: [],\n        nominatedMovies: savedNominations,\n        searchTerm: '',\n        setId: new Set([...savedId]),\n        isTyping: false,\n        pageNumber: 1,\n        totalResults: 0,\n        isChangingPage: false\n    });\n\n    //wait period before API call is made\n    const WAIT_PERIOD = 1500;\n\n\n    /********** Handle Change Functions and Updating State ************/\n    //add nominated movies to local storage and state\n    const addNomMovies = (data) => {\n        setLocalStorage(oldStorage => ({\n            ...oldStorage,\n            nominatedMovies : [\n                ...oldStorage.nominatedMovies,\n                {\n                    Title: data.Title,\n                    Year: data.Year,\n                    imdbID: data.imdbID\n                }\n            ],\n            setId: new Set([...oldStorage.setId.add(data.imdbID)])\n\n        }))\n    };\n\n    //remove nominated movies from local storage and state\n    const removeNomMovies = (data) => {\n        setLocalStorage(oldStorage => ({\n            ...oldStorage,\n            nominatedMovies : [\n                ...oldStorage.nominatedMovies.filter(nomMovie => nomMovie.imdbID !== data.imdbID)\n            ],\n            setId: new Set([...oldStorage.setId].filter(fid => fid !== data.imdbID))\n        }));\n    };\n\n    //callback for setting isTyping to false\n    const updateIsTyping = () => {\n        setLocalStorage(oldStorage => ({\n            ...oldStorage,\n            isTyping: false\n        }))\n    }\n\n    //handles how we are digesting pagination\n    const changePage = (type) => {\n        setLocalStorage(oldStorage => ({\n            ...oldStorage,\n            pageNumber: type === '+' ? oldStorage.pageNumber + 1 : oldStorage.pageNumber - 1,\n            isChangingPage: true\n        }))\n    }\n\n    //handles updating the search term\n    const updateSearchTerm = (e) => {\n        let term = e.target.value;\n\n        setLocalStorage(oldStorage => ({\n            ...oldStorage,\n            searchTerm: term,\n            isTyping: true,\n\n\n        }));\n\n    };\n\n    /********** Use Effects ************/\n    //Set local Storage\n    useEffect(() => {\n        if(localStorage.nominatedMovies.length) {\n            window.localStorage.setItem('savedNoms', JSON.stringify(localStorage.nominatedMovies));\n            window.localStorage.setItem('savedIds', JSON.stringify([...localStorage.setId]));\n        }\n    }, [localStorage.nominatedMovies, localStorage.setId]);\n\n\n\n    //The delay timer in API request\n    useEffect(() => {\n        const delayAPIRequest = setTimeout(updateIsTyping, WAIT_PERIOD);\n        return () => clearTimeout(delayAPIRequest);\n    }, [localStorage.searchTerm]);\n\n\n    //API request when we have text and isTyping is false\n    useEffect(() => {\n        if (localStorage.searchTerm && !localStorage.isTyping) {\n            searchRequest(localStorage.searchTerm).then(response => {\n                setLocalStorage(oldStorage => {\n                    let totalResults = response.Search ? response.totalResults : 0;\n                    return ({\n                        ...oldStorage,\n                        searchResults: response.Search ? response.Search : [],\n                        totalResults,\n                        pageNumber: 1,\n                        isChangingPage: false\n                    });\n                });\n            });\n        }\n    }, [localStorage.isTyping, localStorage.searchTerm]);\n\n    //API pagination request when we are changing pages\n    useEffect(() => {\n        if (localStorage.searchTerm && localStorage.isChangingPage) {\n            searchRequest(localStorage.searchTerm, localStorage.pageNumber).then(response => {\n                setLocalStorage(oldStorage => {\n                    let totalResults = response.Search ? response.totalResults : 0;\n                    return ({\n                        ...oldStorage,\n                        searchResults: response.Search ? response.Search : [],\n                        totalResults,\n                        isChangingPage: false\n                    });\n                });\n            });\n        }\n    }, [localStorage.isChangingPage]);  \n\n\n    //Scroll effect when user has selected 5 movie nominations\n    useEffect(() => {\n        if (localStorage.setId.size >= 5) {\n            thankYouBar.current.scrollIntoView();\n        }\n    }, [localStorage.setId]);\n    \n\n    return (\n        <div>\n            <Container fluid>\n                <Row className='top-bar' ref={thankYouBar}>\n                    <Col sm={2} className='header-logo'>\n                        <header className='text-left'>\n                            <h1>Shoppies</h1>\n                        </header>\n                    </Col>\n                    <Col className='nomination-bar'>\n                        <NominationBar size={localStorage.setId.size } />\n                    </Col>\n                </Row>\n            </Container>\n            <Container fluid>\n                <Row>\n                    <Col sm={2} className='nomination-results'>\n                        <NominatedResults data={ localStorage.nominatedMovies } onClick={removeNomMovies}/>\n                    </Col>\n                    <Col sm={10}>\n                        <SearchBar searchTerm={ localStorage.searchTerm } handleChange={updateSearchTerm}/>\n                        <DisplayOfResults \n                            data={ localStorage } \n                            searchTerm={ localStorage.searchTerm } \n                            onClick={addNomMovies}\n                            pagination={[localStorage.pageNumber,localStorage.totalResults, changePage]} \n                            />\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n\n};\n\nexport default HomePageContainer;","import { library } from '@fortawesome/fontawesome-svg-core'\n// import { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faSearch, faAngleRight, faAngleLeft } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSearch, faAngleLeft, faAngleRight);","import HomePageContainer from './containers/HomePageContainer'\n\nimport './assets/css/index.css';\n\nimport './assets/fontawesome/fontawesomelibrary'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePageContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}